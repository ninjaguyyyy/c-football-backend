generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  password        String
  name            String?
  email           String?          @unique
  emailVerifiedAt DateTime?        @map(name: "email_verified_at")
  token           String           @unique
  image           String?
  role            Role             @default(User)
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  Comment         ProductComment[]

  @@map(name: "users")
}

model Product {
  id Int @id @default(autoincrement())

  name        String
  slug        String @unique
  description String
  price       Float
  quantity    Int
  coverImage  String @map("cover_image")

  active  Boolean @default(true)
  deleted Boolean @default(false)

  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  Comment   ProductComment[]

  @@map(name: "products")
}

model ProductComment {
  id Int @id @default(autoincrement())

  content String
  left    Int    @default(0)
  right   Int    @default(0)

  parentId      Int?            @unique @map("parent_id")
  ParentComment ProductComment? @relation("NestedComment", fields: [parentId], references: [id])
  SeftComment   ProductComment? @relation("NestedComment")

  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int     @map("product_id")
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map(name: "product_comments")
}

enum Role {
  User
  Admin
  SuperAdmin
}
