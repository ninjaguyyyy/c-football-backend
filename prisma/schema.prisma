generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  password        String
  name            String?
  email           String?          @unique
  emailVerifiedAt DateTime?        @map(name: "email_verified_at")
  token           String           @unique
  image           String?
  role            Role             @default(User)
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  Comment         ProductComment[]
  Notification    Notification[]
  Order           Order[]

  @@map(name: "users")
}

model Product {
  id Int @id @default(autoincrement())

  name        String
  slug        String @unique
  description String
  price       Float
  quantity    Int
  coverImage  String @map("cover_image")

  active  Boolean @default(true)
  deleted Boolean @default(false)

  createdAt    DateTime         @default(now()) @map(name: "created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  Comment      ProductComment[]
  OrderProduct OrderProduct[]

  @@map(name: "products")
}

model ProductComment {
  id Int @id @default(autoincrement())

  content String
  left    Int    @default(0)
  right   Int    @default(0)

  parentId      Int?             @map("parent_id")
  ParentComment ProductComment?  @relation("NestedComment", fields: [parentId], references: [id])
  SeftComment   ProductComment[] @relation("NestedComment")

  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int     @map("product_id")
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map(name: "product_comments")
}

model Notification {
  id Int @id @default(autoincrement())

  type       NotiType
  content    String
  receiverId Int?     @map("receiver_id")
  Receiver   User?    @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  options Json?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map(name: "notifications")
}

model Order {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalAmount   Float         @map("total_amount")
  status        OrderStatus   @default(Successful)
  paymentStatus PaymentStatus @default(Pending) @map("payment_status")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  OrderProduct OrderProduct[]

  @@map(name: "orders")
}

model OrderProduct {
  orderId   Int     @map("order_id")
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([orderId, productId])
  @@map(name: "orders_products")
}

enum Role {
  User
  Admin
}

enum NotiType {
  OrderSuccess
}

enum OrderStatus {
  Successful
  Shipped
  Delivered
  Cancelled
  SystemCancelled
}

enum PaymentStatus {
  Pending
  Error
  Completed
  Refunded
}
